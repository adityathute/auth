# Django settings for authMaster project.
# Generated by 'django-admin startproject' using Django 5.0.6.

# Imports
from pathlib import Path
from decouple import config
import os

# Retrieve the PROJECT_NAME from configuration
PROJECT_NAME = config("PROJECT_NAME")
MAIN_SERVER_URL = config('MAIN_SERVER_URL')

# Check if the PROJECT_NAME is properly set
if not isinstance(PROJECT_NAME, str):
    raise ValueError("The PROJECT_NAME variable is not set or is not a string.")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Define BASE_ROOT_DIR by navigating one directory back from BASE_DIR
BASE_ROOT_DIR = os.path.dirname(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# üîí SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# üîí SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Define the allowed hosts for the project.
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=lambda v: [s.strip() for s in v.split(",")])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Installed Applications üìÅ
    'account.apps.AccountConfig',
    'corsheaders',
    'oidc_provider',
]

# MIDDLEWARE configuration for handling HTTP requests and responses
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # New middlewares added after installation
    'corsheaders.middleware.CorsMiddleware',
    'oidc_provider.middleware.SessionManagementMiddleware',
]

# Defines the URL configuration module for the project
ROOT_URLCONF = f"{PROJECT_NAME}.urls"

# Template configuration for Django templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), # Directory containing Django templates
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application configuration
WSGI_APPLICATION = f"{PROJECT_NAME}.wsgi.application"

# Database configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),  # Connect to the local forwarded port
        "PORT": config("DB_PORT", cast=int),  # Use the local forwarded port
        "OPTIONS": {
            "charset": "utf8mb4",
        },
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Directory to collect static files to
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# URL where users will be redirected to login
LOGIN_URL = '/auth/login/'

# Define the authentication backends for the project
AUTHENTICATION_BACKENDS = [
    'account.backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Define the custom user model for authentication
AUTH_USER_MODEL = 'account.User'

# which helps in differentiating between sessions of different projects
# or environments (e.g., development, staging, production) if they share the same domain.
SESSION_COOKIE_NAME = f'{PROJECT_NAME}_sessionid'

# Define CORS settings
CORS_ALLOWED_ORIGINS = [MAIN_SERVER_URL]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_HEADERS = ['Content-Type', 'Authorization', 'X-Requested-With']
CORS_ALLOWED_METHODS = ['GET', 'POST', 'PUT']
CORS_EXPOSE_HEADERS = ['Content-Length', 'X-Total-Count']

# Define OIDC Provider settings
OIDC_RSA_KEY_FOLDER = os.path.join(BASE_ROOT_DIR, 'rsa_keys')
OIDC_ISS_ENDPOINT = f'{config("HOST_NAME")}/openid'
OIDC_TEMPLATES = {'authorize': os.path.join(BASE_DIR, 'templates', 'oidc_provider', 'authorize.html')}
OIDC_EXTRA_SCOPE_CLAIMS = 'account.oidc_scope_claims.AuthMasterScopeClaims'
OIDC_SESSION_MANAGEMENT_ENABLE = True